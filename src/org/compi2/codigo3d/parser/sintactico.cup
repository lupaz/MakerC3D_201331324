package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal  MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal String MAYOR_Q, MENOR_Q, IGUAL, DIFERENTE, MA_IGUAL, ME_IGUAL;
terminal  OR, AND, NOT;
nonterminal String op_rel;
nonterminal NodoC3D inicial, expresion,logica,relacional;

precedence left OR;
precedence left AND;
precedence right NOT;
precedence left MAYOR_Q, MENOR_Q, IGUAL, DIFERENTE, MA_IGUAL, ME_IGUAL;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} logica:Log
                    {: 
                        RESULT = Log;
                        if(!Log.getSentencia().equals("")){
                            ControlC3D.agregarLogica(Log.getSentencia(),Log.getTrue(),Log.getFalso());
                        }else{
                            ControlC3D.agregarC3D("//Ultimo temporal reconocido: "+Log.getCad());
                        }
                    :};

           
logica      ::= logica:izq OR logica:der
                    {: 
                        RESULT = new NodoC3D();
                        RESULT.setSentencia(izq.getSentencia()+"\n"+izq.getFalso()+":\n"+der.getSentencia());
                        RESULT.setTrue(izq.getTrue());
                        RESULT.addLabelTrue(der.getTrue());
                        RESULT.setFalso(der.getFalso()); 
                    :}
            |   logica:izq AND logica:der
                    {: 
                        RESULT = new NodoC3D();
                        RESULT.setSentencia(izq.getSentencia()+"\n"+izq.getTrue()+":\n"+der.getSentencia());
                        RESULT.setTrue(der.getTrue());
                        RESULT.setFalso(izq.getFalso());
                        RESULT.addLabelFalso(der.getFalso()); 
                    :}
            |   NOT logica:der
                    {: //!(8>7 && 7<10 || 8==8) 
                        RESULT = new NodoC3D();
                        RESULT.setSentencia(der.getSentencia());
                        RESULT.setTrue(der.getFalso());
                        RESULT.setFalso(der.getTrue());
                    :}
            |   relacional:rel
                    {:
                        RESULT= rel;
                    :};

relacional  ::= expresion:izq op_rel:op expresion:der
                    {: 
                        if(op.equals(">")){
                            RESULT = new NodoC3D();
                            String lTrue=ControlC3D.generarLabel();
                            RESULT.setTrue(lTrue);
                            String lFalso=ControlC3D.generarLabel();
                            RESULT.setFalso(lFalso);
                            String cuerpo ="if "+izq.getCad() + " > " + der.getCad()+" go to "+lTrue+"\n"
                                   +"go to "+lFalso;
                            RESULT.setSentencia(cuerpo);
                        }else if(op.equals("<")){
                            RESULT = new NodoC3D();
                            String lTrue=ControlC3D.generarLabel();
                            RESULT.setTrue(lTrue);
                            String lFalso=ControlC3D.generarLabel();
                            RESULT.setFalso(lFalso);
                            String cuerpo ="if "+izq.getCad() + " < " + der.getCad()+" go to "+lTrue+"\n"
                                   +"go to "+lFalso;
                            RESULT.setSentencia(cuerpo);                        
                        }else if(op.equals(">=")){
                            RESULT = new NodoC3D();
                            String lTrue=ControlC3D.generarLabel();
                            RESULT.setTrue(lTrue);
                            String lFalso=ControlC3D.generarLabel();
                            RESULT.setFalso(lFalso);
                            String cuerpo ="if "+izq.getCad() + " >= " + der.getCad()+" go to "+lTrue+"\n"
                                   +"go to "+lFalso;
                            RESULT.setSentencia(cuerpo);                         
                        }else if(op.equals("<=")){
                            RESULT = new NodoC3D();
                            String lTrue=ControlC3D.generarLabel();
                            RESULT.setTrue(lTrue);
                            String lFalso=ControlC3D.generarLabel();
                            RESULT.setFalso(lFalso);
                            String cuerpo ="if "+izq.getCad() + " <= " + der.getCad()+" go to "+lTrue+"\n"
                                   +"go to "+lFalso;
                            RESULT.setSentencia(cuerpo);                         
                        }else if(op.equals("==")){
                            RESULT = new NodoC3D();
                            String lTrue=ControlC3D.generarLabel();
                            RESULT.setTrue(lTrue);
                            String lFalso=ControlC3D.generarLabel();
                            RESULT.setFalso(lFalso);
                            String cuerpo ="if "+izq.getCad() + " == " + der.getCad()+" go to "+lTrue+"\n"
                                   +"go to "+lFalso;
                            RESULT.setSentencia(cuerpo);                    
                        }else{
                            RESULT = new NodoC3D();
                            String lTrue=ControlC3D.generarLabel();
                            RESULT.setTrue(lTrue);
                            String lFalso=ControlC3D.generarLabel();
                            RESULT.setFalso(lFalso);
                            String cuerpo ="if "+izq.getCad() + " != " + der.getCad()+" go to "+lTrue+"\n"
                                   +"go to "+lFalso;
                            RESULT.setSentencia(cuerpo);
                        }
                        
                    :}
            |   expresion:exp 
                    {:
                        RESULT=exp;
                    :};


op_rel      ::= MAYOR_Q:rel
                    {:
                            RESULT=rel;
                    :}
            |   MENOR_Q:rel
                    {:
                            RESULT=rel;
                    :}
            |   MA_IGUAL:rel
                    {:
                            RESULT=rel;
                    :}
            |   ME_IGUAL:rel
                    {:
                            RESULT=rel;
                    :}
            |   DIFERENTE:rel
                    {:
                            RESULT=rel;
                    :}
            |   IGUAL:rel
                    {:
                            RESULT=rel;
                    :};


expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ logica:log PAR_DER   
                    {: RESULT = log; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;